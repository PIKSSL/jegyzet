Munkamegosztás...:
Hogy rövidre fogjam a szót: mindenki csinált mindent. Mind a hárman karöltve csiszolgattuk és fejlesztgettük a projektet, mindenki részt vett az adatbázis megtervezésében és megírásában valamint a frontend/backend munkálatokban egyaránt. A projekt menedzselése githubon történt, amely lehetővé tette, hogy mindenki egyszerre végezze a kiszabott feladatait akár egy időben. Kezdetben megpróbálkoztunk egy ticket rendszer kialakításával, hogy a projektmenedzsment gond nélkül történjen, de hamar rájöttünk, hogy nem tudjuk megfelelően tartani és nem frissítettük időben. Ezt láthatjátok a kivetített dián is, amely aktuálisan is hasonlóan néz ki a githubon.

Mit használunk, miben dolgoztunk...:
Mysqlt használtunk az adatbázisunk létrehozásához.
A weboldal backend részét egy számunkra teljesen új keretrendszerben hoztuk létre, amely sok érdekességet és újdonságot tartalmazott számunkra. Laravelnek nevezik ezt a keretrendszert. A laravel egy igen stabil, php alapokon működő keretrendszer, melyben könnyen és gyorsan lehet webalkalmazásokat fejleszteni és az MVC tervezési mintát követi. A Laravel keretrendszer számos funkcióval rendelkezik, például routing, adatbázis-kezelés, sablonok, autentikáció, hibakezelés és még sok más. 
A tartalmak megjelenítését javascript, jquery, css és bootstrappel végeztük. És természetesen igyekeztük tartani magunkat az MVC modell-hez.
A backend és a frontend közötti kommunikációt restAPI-val valósítottuk meg.
Végül pedig mindezt Dockerben futtattuk. Röviden a dockerről: docker egy nyílt forráskódú konténer platform, amely lehetővé teszi az alkalmazások és szolgáltatások gyors és egyszerű csomagolását, szállítását és üzemeltetését különböző virtuális környezetekben.

Rendelés megvalósítás...:
A rendelés úgy zajlik a weboldalunkon, hogy a már regisztrált felhasználó kiválasztja a vásárolni kívánt termékeket, majd a kosárba helyezi azt. A kosárból tovább haladva bekérjük a felhasználótól a szállítási adatait egy űrlap segítségével, majd miután a megjelenített űrlapot helyesen kitöltötte, leadhatja a rendelését. A rendelés egy post kérést indít a szerver felé az elküldött adatokkal, majd elküldést követően feldolgozásra kerül a szerver oldalon. Ott mégegyszer átesik egy ellenőrzésen a megadott szállítási cím, majd ha rendben találjuk, elmentjük ha még nem létezett előtte az adatbázisban. Miuátan a rendelés sikeresen létrejött, felvisszük a rendelés tételeit is az adatbázisba. Mivel eredetileg a termékeink külső oldalról származnának, ezért nincsenek külön elmentve az adatbázisban, tehát a termékeket is el kell mentenünk a követhetőség érdekében. A termékeket json adatszerkezetből kérjük ki és azokkal dolgozunk, de egy külső weboldalról sem bonyolultabb a lekérés. Végül pedig beállítjuk a rendelés végösszegét a tételek árai alapján és át is veheti az admin, aki folytatja a feldolgozást innentől már manuálisan, a felhasználó pedig egy visszaigazolást kap a rendelés állapotáról.

Rendelés megvalósítása kódrészlet...:
Egy kódrészletet láthatunk a renndelés felviteléről. Elsőként a beérkezett termékeket php adatszerkezetté alakítjuk, hogy dolgozhassunk vele. Alatta egy cím ellenőrzés, amelyben validáljuk a megadott címet mégegyszer és ha nem sikerül a validáció, a rendelés sikertelennek minősül. Valid cím esetén a rendelést létrehozzuk, aztán felvesszük a rendelés tételeit is. Amennyiben idáig sikeres volt a rendelés felvétel, hozzáadjuk a rendeléshez a végösszeget.
Itt a rendelés tételek felvételéről és termékek ellenőrzéséről, valamint felviteléről láthatjuk a kód részletet ezen a dián. Először ellenőrizzük a termék létezését az adatbázisban, ami ha létezik, akkor a termék kódjával dolgozunk tovább, ellenkező esetben pedig felvesszük a terméket az adatbázisba. Ezt követően pedig a termékkel létrehozzuk a tételt.
Végül pedig láthatunk egy részletet a cím ellenőrzésből és létrehozásból. Ha a cím átmegy a validáláson, megnézzük, hogy létezik-e már az adatbázisban és a termékekhez hasonlóan csak akkor veszünk fel újat, ha az még előtte nem létezett az adatbázisban és azt a címet adjuk vissza rendelést létrehozó függvénynek. Ha a cím validáláskor elbukik, a rendelés sikertelennek minősül.

Demo:
So, the user selects his products that he places in the basket. In the cart you can see the product, its pictures and change the quantity you want to order. By clicking "Next", you can enter your shipping details, but you can also use the previously saved ones. Then, if the user has entered their details correctly, they can place their order.


Szóval a felhasználó kiválasztja a termékeit, amelyeket a kosárba helyez. A kosárban láthatja a terméket, annak képét és változtathatja a rendelni kívánt mennyiséget. A "Tovább" gombra kattintva megadhatja a szállítási adatait, de használhatja a korábban elmentetteket is. Ezután leadhatja a rendelést a felhasználó.